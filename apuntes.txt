console.time("nombre del time");
console.timeEnd("nombre del time");

console.warn("cadena de texto");//muestra el mensajes tipo warning
console.error("mensaje de error");//muestra el mensaje como si fuera un error

----------------
En la consola si el valor de una varaible es negro, significa que es una cadena.
Si el valor en la consola es azul es porque es un numero.


-------------------------------------------
//NOmbre de las variables:
    -no puede empezar con un numero: 99dias->error
    -no puede tener caracteres especiales al inicio: *nina-> error

    -primerNombre='Juan'; //camelcase (La mejor de todas)
    -var primer_nombre='Juan'; //undercore
    -var PrimerNombre='Juan'; //pascal case
    -var primernombre='Juan'; Esta es la peor

    Las varaibles pueden empezar por: $ o por _
    var $nombre="Jesus";
    var _nombre="JEsus";
---------------------------------------------


var let const

let producto="libro";
let producto="caja";

Esto produce un error no te permite redeclarar la misma varible. Tendriamos que hacer esto para que funcione:

let producto="libro";
producto="caja";

Esto no da error.

Podemos hacer lo mismo con var y no nos daria error ya que var si nos permite redeclarar.

No hace falta inicializar las variable scon let o var.
let producto;
producto="caja";

const: se usa cuando el valor no va a cambiar en la ejecucion del programa.
siemrpe hay que iniciar la variable que declaremos con const.


-------------------------------------------------
Escapar las comillas: es cuando queremos que una cadena de texto muestre un mensaje entre comillas: Y entonces dije 'Buenos dias!!';
Para hacer ese mensaje escapamos las comillas:
let mensaje='Y entonces dije \'Buenos dias!!!\' ';

Tambien se puede hacer con comillas dobles y no necesitamos escapar nada:
let mensaje="Y entonces dije \'Buenos dias!!!\' ";

Nos dara error si hacemos lo siguiente:
let mensaje='Y entonces dije 'Buenos dias!!!' '; --> este error se produce cuando ponemos comillas side un mismo tipo denro de otras comillas del mismo tipo.
-----------------------------------------------
Metodos de String

toUpperCase()

slice(2,4)
slice(-5)
slice(10,-5)

split(" ")

indexOf('va')

repeat(10)-> error cuando el numero indicado es negativo o es casi infitino

includes('php')

let tecnologia="Me gusta, aprender Javascript";

console.log(tecnologia.toUpperCase());
//ME GUSTA APRENDER JAVASCRIPT
console.log(tecnologia.substring(0,1));//M
console.log(tecnologia.substring(0,11));//Me gusta ap


console.log(tecnologia.slice(2,4));//g
console.log(tecnologia.slice(-5));//cript-> cuenta desde el final y solo  letras
console.log(tecnologia.slice(10,-5));//prender Javas--> cuanta desde la letra numero  del final hasta 10 letras siguientes


console.log(tecnologia.split(" "));//Array [ "Me", "gusta,", "aprender", "Javascript" ]--> convierte en un array a partir de un separador como es el espacio

console.log(tecnologia.indexOf('va'));//21 --> devuelve la 1º posicion de la cadena indicada
console.log(tecnologia.indexOf('vacano'));//-1 --> devuelve -1 si no se encuentra la cadena


console.log(tecnologia.repeat(10));//Me gusta, aprender JavascriptMe gusta, aprender JavascriptMe gusta, aprender JavascriptMe gusta, aprender JavascriptMe gusta, aprender JavascriptMe gusta, aprender JavascriptMe gusta, aprender JavascriptMe gusta, aprender JavascriptMe gusta, aprender JavascriptMe gusta, aprender Javascript  --> repite la cadena el numero de veces indicada

console.log(tecnologia.repeat(-10)); //Da un error-->RangeError: repeat count must be non-negative

console.log(tecnologia.includes('php')); //false-> devuelve false si la cadena no se encentra en el texto
console.log(tecnologia.includes('va')); //duvuelve true si hay una cadena igual que la indicada en el texto

----------------------------------------------
Numeros en Javascript

let resultado;




resultado=Math.PI;

resultado=Math.round(2.4); //2 -->Redondea al entero mas cercano 

resultado=Math.floor(2.8); //2 -->Redondea al entero inferior mas cercano

resultado=Math.ceil(2.1); //3 -->Redondea al enterio superior mas cercano

resultado=Math.abs(-3); //3 valor absoluto

resultado=Math.min(3,6,8,1,-6,0); //-6-->Devuelve el valor mas pequeño del array

resultado=Math.max(3,6,8,1,-6,0); //8 -->Devulve el valor mas grande e un array

resultado=Math.random();//0.03715101385965769-->numero aleatorio entre 0 y 1


--------------------------------------------------
Tipos de datos

Js: es un lengiaje tipo dinamico, es decir que no tiene necesidad de delcarar el tipo de dato.
Los datos en JS se guardan en el valor de la variable y no en la variable

let valor;

typeof(valor);

---------------Tipos de datos primitivos-------
Todos los numeros son de tipo number.

Todas las cadenas son de tipo String.

Tipo de dato null. --> en un objeto.

undefined--> es por ejemplo cuando la variable no esta definida.


tipo symbol.

valor=Symbol('Simbolo'); -->symbol

-----------------Tipos de datos objetos o de referencia------

valor=[1,2,1,3]; --> es un arreglo. Es un tipo de objetos

valor={1,2,3,4} --> es un objeto. Es un tipo de objeto.

valor new Date():--> es un tipo objeto


--------------de String a numeros---------------------
parseInt()->entero y parseFloat()->flotantes y Number()->Lo convierte a numero

const numero1="50",
      numero2=10,
      numero3="tres";


console.log(numero1+numero2);


//Principal motivo para pasar de un string a un numero es por ejemplo esto:
console.log(numero1+numero2);// resultado: 5010

//Tenemos que pasarlo a un entero: parseInt()

console.log(parseInt(numero1)+numero2); //Resultado correcto: 60

//Por el contrario en la resta no hace falta
console.log(numero1-numero2); //Resultado correcto

dato=Number("20");
console.log(typeof(dato));->//number


dato=20.0454512121

console.log(dato.toFixed(2));//20.05
console.log(dato.toFixed(4));//20.0450


NaN: significa que no es un numero


---------------------------------------------
Numero a string

dato.toString()  ///// String(dato)



let cp;

    cp=90210;
    //Los datos tipo number no se pueden contar el numero de digitos
    console.log(cp.length); //resultado:  undefined

    let dato="4"+"4";
      console.log(dato.length);//resultado:2 , porque contiene 2 letras

      dato=true; //booleano
      console.log(dato.length);//resultado: undefined

      //Convirtiendo a tipo string: String()

      console.log(String(dato).length);//Resultado: 4;

      //toString();
      dato=555;
      dato=dato.toString();
      console.log(dato.length);//resultado: 3

      Ya es un string por lo tanto puede usar todos los metodos de los string




--------------------------------------
Template Literals o string Template  ${variable}
const producto1="Pizza",
      precio1=30,
      producto2="Hamburguesa",
      precio2=40;

//version antigua, mezcla html con las variables muchos signos +, se ve todo muy feo
let html;

html="<ul>"+
    "<li>Orden: "+producto1+ "</li>"+
    "<li>Precio: "+precio1+ "</li>"+
    "<li>Orden: "+producto2+"</li>"+
    "<li>Precio: "+precio2+"</li>"+
    "</ul>";

    document.getElementById("app").innerHTML=html;

//usando string Template
html=`
        <ul>
            <li>Orden: ${producto1}</li>
            <li>Precio: ${precio1}</li>
            <li>Orden: ${producto2}</li>
            <li>Precio: ${precio2}</li>
            <li>Precio: ${total(precio1,precio2)}</li>
        </ul>

`;


function total(precio1,precio2){
    return precio1+precio2
}



--------------------------
Arreglos en JS y sus metodos

vector.sort();
vector.splice();
vector.split();
array.isArray();
vector.push();
vector.pop();
vector.concat(vector2);
.
.
.
.
.
.


const numeros=[10,20,30,40,50];

console.log(numeros);

//Array de String (metodo alternativo) Es decir no hace falta hacerlo asi para crear un array destring

const meses= new Array("Enenero","Febrero","Marzo");


//Arreglo mezclado

const mezclado=["HOla",10,20];


//Método para saber si es un arreglo
      //Array.isArray(nombre_var);
let hola=5;
console.log(Array.isArray(mezclado));//resultado: true

console.log(hola);//resultado: false


//Añadir elemento al final del arreglo: array.push(elemento)

console.log(meses.push("Abril")); //devuelve el tamaño del vector si se ha insertado correctamente


//Encontrar un elemento del arreglo
console.log(meses.indexOf("Abril"));//devuelve la primera posicion del elemento

//Añadir al inico del arreglo
console.log(meses.unshift("Mes 0 1")); //Devuelve el tamaño del array. Aunque tenga espacios hemos insertado un string pero con espacios


//Eliminar elemento final del array
console.log(meses.pop()); //retorna el elemento elimnado

//eliminar el primer elemento

console.log(meses.shift());//Retorna el elemento eliminado

//Quitar elemento o elementos a partir de cualquier posicion

meses.splice(2,1);//A partir de la posicion 2 eliminamos 1 elemento.

//Revertir el array
meses.reverse();

//Concatenar arreglos:
let arreglo1=[1,2,3],
arreglo2=[9,8,7];

console.log(arreglo1.concat(arreglo2)); //resultado: devuelve un array concatenado, pero no modifica ninguno de los dos arrays.

//ordenar alfabeticamente arreglo de string. Mo funciona correctamente con los arreglos numericos
meses.push("Marzo","Abril","Mayo","Junio");
console.log(meses.sort());//Resultado: modifica los valores del array y los ordena alfabeticamente

arreglo1.sort(function(x,y){
      return x-y;
});

console.log(arreglo1);




-------------------------------------------------
Variable const en objetos y arreglos
-------------------------------------------------
//Lo que no podemos hacer con un array const es reasignar los valores en el vector es decir:
numeros=[8,9,10]; // resutlado: TypeError: invalid assignment to const `numeros'

const numeros=[1,2,3];

console.log(numeros);//resultado: Array(3) [ 1, 2, 3 ]

//Podemos modificar los elementos, añadir e incluso elimnar

numeros.push(5);
console.log(numeros); //resultado: Array(4) [ 1, 2, 3, 5 ]

numeros.pop();
console.log(numeros); //resultado: Array(4) [ 1, 2, 3 ]

numeros[0]=9;
console.log(numeros);//resultado:Array(4) [9, 2, 3 ]



-----------------------------------------------
Objetos en Javascript
--------------------------------------------


/crear Objeto

const persona={
      nombre: "Miguel",
      apellido: "Martinez",
      profesion: "Diseñador grafico",
      email: "correo@corre.com",
      edad: 20,
      musica:["trance","rock","Rap"],
      hogar:{
            ciudad: "Cordoba",
            pais:"España"
      },

      nacimiento: function(){
            return new Date().getFullYear()-this.edad;
            //this.edad accedemos a la edad que pusimos dentro del objeto
      }
}

console.log(persona); //resultado: Object { nombre: "Miguel", apellido: "Martinez", profesion: "Diseñador grafico", email: "correo@corre.com" }

//Acceder a los valores dentro de un objeto:
console.log(persona.nombre); //reultado: Miguel

console.log(persona.musica);//reusltado: Array(3) [ "trance", "rock", "Rap" ]

//Accediendo a los valores de un array dentro del objeto
console.log(persona.musica[2]);//resultado: Rap

//Modificando el array dentro del objeto
console.log(persona.musica.push("Jazz")); //resutlado: 4 devuelve tamaño actual del vector 

console.log(persona.musica); //resultado Array(4) [ "trance", "rock", "Rap" , "Jazz"]


//Objetos dentro de objetos
//accedemos al contenido de ese objeto

console.log(persona.hogar.ciudad); //resultado: Cordoba


//Funciones dentro de objetos

console.log(persona.nacimiento()); //resultado : 1998



---------------------------------------
Creando arreglos de objetos

-------------------------------------

//Arreglo de objetos

const autos=[
      {modelo:"Mustang",motor:"6.0"},
      {modelo:"Camaro",motor:"6.1"},
      {modelo:"Challenger",motor:"6.3"},
];

//La variable const nos permite modificar los objetos, añadir o eliminar lo que no nos permite es rediseñar ese objeto:
autos={saludo:"hola"};  //Error:TypeError: invalid assignment to const 


console.log(autos); //Resultado:
/*
(3) […]
​
0: Object { modelo: "Mustang", motor: "6.0" }
​
1: Object { modelo: "Camaro", motor: "6.1" }
​
2: Object { modelo: "Challenger", motor: "6.3" }
​
length: 3
*/

for(let i=0; i<autos.length;i++){
      console.log(`${autos[i].modelo} ${autos[i].motor}`);
}


----------------------------------------
Funciones en Javascript
---------------------------------------



---------------------------------------
Que es el DOM
---------------------------------------
El DOM es todo lo que se compone un documento html, como son las etiquetas, textos, atributos de las etiquetas, etc. (Cada elemento del DOM se puede definir con la palabra nodo)

Podemos seleeccionar un elemento y navegar a partir de el por el resto de nodos.
Podemos seleccionar un nodo y agregarle texto...

-------------------------------------------
Primeros pasos con DOM y Scriping
-------------------------------------------





-----------------------------------------------

Event Listener CLick
-----------------------------------------------

 e.preventDefault();
e.target;

//click en el buscador
document.querySelector('#submit-buscador').addEventListener('click',function(e){
    e.preventDefault();//detenemos la accion por defecto del elemento. Por ejemplo el submit por defecto va a llevarte a la pagina que se encuentra en el action del form. Como en esta ocasion no queremos eso por eso lo paramos
    alert("Buscando cursos");
});

function ejecutarBoton(e){
    e.preventDefault();
    console.log("Desde la funcion ejecutar boton");

    console.log(e);//Nos muestra la informacion relacionada con el evento

    e.target;//target nos muestra el elemento al que hemos realizado en evento
    console.log(e.target);

    console.log(e.target.ClassName);

    console.log(e.target.innerText);
}